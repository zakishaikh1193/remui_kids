<div class="detail-page">
    <!-- Header Section -->
    <div class="detail-header">
        <div class="header-content">
            <div class="back-button">
                <a href="javascript:history.back()" class="btn-back">
                    <i class="fa fa-arrow-left"></i>
                    Back to Dashboard
                </a>
            </div>
            <div class="header-info">
                <h1 class="detail-title">
                    <i class="fa fa-building"></i>
                    Department Managers Details
                </h1>
                <p class="detail-subtitle">Users with manager roles in departments</p>
            </div>
        </div>
    </div>

    <!-- Statistics Overview -->
    <div class="stats-overview">
        <div class="stats-grid">
           
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fa fa-user-tie"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number" id="company-managers">-</div>
                    <div class="stat-label">Managers</div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fa fa-users"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number" id="total-employees">-</div>
                    <div class="stat-label">Total Employees</div>
                </div>
            </div>
           
        </div>
    </div>

    <!-- Filters and Search -->
    <div class="filters-section">
        <div class="filters-container">
            <div class="search-box">
                <input type="text" id="searchInput" placeholder="Search managers..." class="search-input">
                <button id="searchBtn" class="search-btn">
                    <i class="fa fa-search"></i>
                </button>
            </div>
            <div class="filter-controls">
                <select id="sortSelect" class="filter-select">
                    <option value="firstname">Sort by First Name</option>
                    <option value="lastname">Sort by Last Name</option>
                    <option value="username">Sort by Username</option>
                    <option value="email">Sort by Email</option>
                    <option value="department_name">Sort by Department</option>
                </select>
                <select id="orderSelect" class="filter-select">
                    <option value="ASC">Ascending</option>
                    <option value="DESC">Descending</option>
                </select>
                <select id="perPageSelect" class="filter-select">
                    <option value="20">20 per page</option>
                    <option value="50">50 per page</option>
                    <option value="100">100 per page</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Managers Table -->
    <div class="table-container">
        <div class="table-header">
            <h3>Department Managers</h3>
            <div class="table-actions">
                <button id="refreshBtn" class="btn-refresh">
                    <i class="fa fa-refresh"></i>
                    Refresh
                </button>
            </div>
        </div>
        <div class="table-wrapper">
            <table class="managers-table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Username</th>
                        <th>Email</th>
                        <th>Department</th>
                        <th>Company</th>
                        <th>Role</th>
                        <th>Employees</th>
                        <th>Last Access</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="managersTableBody">
                    <tr>
                        <td colspan="9" class="loading-cell">
                            <div class="loading-spinner">
                                <i class="fa fa-spinner fa-spin"></i>
                                Loading managers...
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Loading Overlay -->
<div id="loadingOverlay" class="loading-overlay" style="display: none;">
    <div class="loading-spinner-main"></div>
</div>

<style>
/* Enhanced CSS with animations and modern styling */
.detail-page {
    padding: 20px;
    max-width: 1200px;
    margin: 0 auto;
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    min-height: 100vh;
    animation: fadeIn 0.8s ease-out;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

.detail-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 20px;
    padding: 40px;
    margin-bottom: 30px;
    box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
    color: white;
    position: relative;
    overflow: hidden;
    animation: slideInDown 0.8s ease-out;
}

.detail-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="white" opacity="0.1"/><circle cx="75" cy="75" r="1" fill="white" opacity="0.1"/><circle cx="50" cy="10" r="0.5" fill="white" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
    opacity: 0.3;
}

@keyframes slideInDown {
    from { opacity: 0; transform: translateY(-30px); }
    to { opacity: 1; transform: translateY(0); }
}

.header-content {
    display: flex;
    align-items: center;
    gap: 30px;
    position: relative;
    z-index: 1;
}

.back-button {
    flex-shrink: 0;
}

.btn-back {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    padding: 15px 25px;
    background: rgba(255, 255, 255, 0.2);
    color: white;
    text-decoration: none;
    border-radius: 12px;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    font-weight: 500;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.3);
}

.btn-back:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: translateX(-5px) scale(1.05);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
}

.header-info {
    flex: 1;
}

.detail-title {
    margin: 0 0 15px 0;
    color: white;
    font-size: 2.5rem;
    display: flex;
    align-items: center;
    gap: 20px;
    font-weight: 700;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    animation: titleGlow 2s ease-in-out infinite alternate;
}

@keyframes titleGlow {
    from { text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); }
    to { text-shadow: 0 2px 20px rgba(255, 255, 255, 0.3); }
}

.detail-subtitle {
    margin: 0;
    color: rgba(255, 255, 255, 0.9);
    font-size: 1.2rem;
    font-weight: 300;
}

.stats-overview {
    margin-bottom: 30px;
    animation: slideInUp 0.8s ease-out 0.2s both;
}

@keyframes slideInUp {
    from { opacity: 0; transform: translateY(30px); }
    to { opacity: 1; transform: translateY(0); }
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 25px;
}

.stat-card {
    background: white;
    border-radius: 20px;
    padding: 30px;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
    gap: 25px;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.stat-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s;
}

.stat-card:hover::before {
    left: 100%;
}

.stat-card:hover {
    transform: translateY(-10px) scale(1.02);
    box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
}

.stat-card:nth-child(1) {
    animation: cardSlideIn 0.6s ease-out 0.1s both;
}

.stat-card:nth-child(2) {
    animation: cardSlideIn 0.6s ease-out 0.2s both;
}

.stat-card:nth-child(3) {
    animation: cardSlideIn 0.6s ease-out 0.3s both;
}

.stat-card:nth-child(4) {
    animation: cardSlideIn 0.6s ease-out 0.4s both;
}

@keyframes cardSlideIn {
    from { opacity: 0; transform: translateX(-30px); }
    to { opacity: 1; transform: translateX(0); }
}

.stat-icon {
    width: 70px;
    height: 70px;
    border-radius: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.8rem;
    color: white;
    position: relative;
    overflow: hidden;
    transition: all 0.3s ease;
}

.stat-icon::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: inherit;
    border-radius: inherit;
    z-index: -1;
}

.stat-card:nth-child(1) .stat-icon {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    animation: iconPulse 2s ease-in-out infinite;
}

.stat-card:nth-child(2) .stat-icon {
    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    animation: iconPulse 2s ease-in-out infinite 0.5s;
}

.stat-card:nth-child(3) .stat-icon {
    background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
    animation: iconPulse 2s ease-in-out infinite 1s;
}

.stat-card:nth-child(4) .stat-icon {
    background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
    animation: iconPulse 2s ease-in-out infinite 1.5s;
}

@keyframes iconPulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.1); }
}

.stat-content {
    flex: 1;
}

.stat-number {
    font-size: 3rem;
    font-weight: 800;
    color: #2c3e50;
    margin-bottom: 8px;
    transition: all 0.3s ease;
    background: linear-gradient(135deg, #667eea, #764ba2);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.stat-label {
    color: #6c757d;
    font-size: 1.1rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.filters-section {
    background: white;
    border-radius: 20px;
    padding: 30px;
    margin-bottom: 30px;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    animation: slideInUp 0.8s ease-out 0.4s both;
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.filters-container {
    display: flex;
    gap: 25px;
    align-items: center;
    flex-wrap: wrap;
}

.search-box {
    flex: 1;
    min-width: 350px;
    position: relative;
}

.search-input {
    width: 100%;
    padding: 18px 60px 18px 25px;
    border: 2px solid #e9ecef;
    border-radius: 15px;
    font-size: 1.1rem;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    background: #f8f9fa;
}

.search-input:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
    background: white;
    transform: translateY(-2px);
}

.search-btn {
    position: absolute;
    right: 20px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: #6c757d;
    cursor: pointer;
    font-size: 1.2rem;
    transition: all 0.3s ease;
}

.search-btn:hover {
    color: #667eea;
    transform: translateY(-50%) scale(1.1);
}

.filter-controls {
    display: flex;
    gap: 20px;
    flex-wrap: wrap;
}

.filter-select {
    padding: 15px 20px;
    border: 2px solid #e9ecef;
    border-radius: 12px;
    font-size: 1rem;
    background: white;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    min-width: 150px;
}

.filter-select:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    transform: translateY(-2px);
}

.table-container {
    background: white;
    border-radius: 20px;
    padding: 30px;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    animation: slideInUp 0.8s ease-out 0.6s both;
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.table-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 25px;
}

.table-header h3 {
    margin: 0;
    color: #2c3e50;
    font-size: 1.8rem;
    font-weight: 700;
}

.table-actions {
    display: flex;
    gap: 20px;
}

.btn-refresh {
    padding: 15px 25px;
    border: none;
    border-radius: 12px;
    cursor: pointer;
    font-size: 1rem;
    display: flex;
    align-items: center;
    gap: 10px;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    font-weight: 600;
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
}

.btn-refresh:hover {
    transform: translateY(-2px) scale(1.05);
    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
}

.btn-refresh:active {
    transform: translateY(0) scale(0.98);
}

.table-wrapper {
    overflow-x: auto;
    border-radius: 15px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
}

.managers-table {
    width: 100%;
    border-collapse: collapse;
    background: white;
}

.managers-table th {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    padding: 20px 15px;
    text-align: left;
    font-weight: 700;
    color: #495057;
    border-bottom: 3px solid #667eea;
    font-size: 0.95rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.managers-table td {
    padding: 20px 15px;
    border-bottom: 1px solid #e9ecef;
    vertical-align: middle;
    transition: all 0.3s ease;
}

.managers-table tr {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.managers-table tr:hover {
    background: linear-gradient(135deg, #f8f9fa 0%, #e3f2fd 100%);
    transform: scale(1.01);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.loading-cell {
    text-align: center;
    padding: 60px;
}

.loading-spinner {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 15px;
    color: #6c757d;
    font-size: 1.2rem;
    animation: pulse 1.5s ease-in-out infinite;
}

@keyframes pulse {
    0%, 100% { opacity: 0.6; }
    50% { opacity: 1; }
}

.manager-name {
    font-weight: 700;
    color: #2c3e50;
    font-size: 1.1rem;
}

.manager-username {
    color: #6c757d;
    font-family: 'Courier New', monospace;
    background: #f8f9fa;
    padding: 4px 8px;
    border-radius: 6px;
    font-size: 0.9rem;
}

.manager-email {
    color: #495057;
    font-weight: 500;
}

.manager-department {
    color: #495057;
    font-weight: 600;
    background: linear-gradient(135deg, #667eea, #764ba2);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.manager-role {
    color: #6c757d;
    font-size: 0.9rem;
    font-weight: 500;
}

.manager-employees {
    color: #495057;
    font-weight: 700;
    font-size: 1.1rem;
}

.manager-date {
    color: #6c757d;
    font-size: 0.9rem;
    font-weight: 500;
}

.action-buttons {
    display: flex;
    gap: 10px;
}

.btn-action {
    padding: 8px 16px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 0.9rem;
    font-weight: 600;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.btn-edit {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
}

.btn-edit:hover {
    transform: translateY(-2px) scale(1.05);
    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
}

.btn-view {
    background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
    color: white;
    box-shadow: 0 4px 15px rgba(108, 117, 125, 0.3);
}

.btn-view:hover {
    transform: translateY(-2px) scale(1.05);
    box-shadow: 0 8px 25px rgba(108, 117, 125, 0.4);
}

/* Responsive Design */
@media (max-width: 768px) {
    .detail-page {
        padding: 15px;
    }
    
    .header-content {
        flex-direction: column;
        gap: 20px;
        text-align: center;
    }
    
    .detail-title {
        font-size: 2rem;
    }
    
    .stats-grid {
        grid-template-columns: 1fr;
    }
    
    .filters-container {
        flex-direction: column;
        gap: 15px;
    }
    
    .search-box {
        min-width: 100%;
    }
    
    .filter-controls {
        justify-content: center;
    }
}

/* Loading Animation */
.loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.9);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
    backdrop-filter: blur(5px);
}

.loading-spinner-main {
    width: 50px;
    height: 50px;
    border: 4px solid #f3f3f3;
    border-top: 4px solid #667eea;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Number Animation */
@keyframes countUp {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

.stat-number.animate {
    animation: countUp 0.6s ease-out;
}

/* Table Row Animation */
@keyframes rowSlideIn {
    from { opacity: 0; transform: translateX(-20px); }
    to { opacity: 1; transform: translateX(0); }
}

.managers-table tr {
    animation: rowSlideIn 0.3s ease-out;
}

.managers-table tr:nth-child(even) {
    animation-delay: 0.1s;
}

.managers-table tr:nth-child(odd) {
    animation-delay: 0.2s;
}
</style>

<script>
let currentPage = 1;
let currentPerPage = 20;
let currentSearch = '';
let currentSort = 'firstname';
let currentOrder = 'ASC';
let totalPages = 1;

// Enhanced loading functions
function showLoading() {
    document.getElementById('loadingOverlay').style.display = 'flex';
}

function hideLoading() {
    document.getElementById('loadingOverlay').style.display = 'none';
}

// Animate number updates
function animateNumberUpdate(elementId, newValue) {
    const element = document.getElementById(elementId);
    if (!element) return;
    
    const currentValue = parseInt(element.textContent) || 0;
    const difference = newValue - currentValue;
    const duration = 1000;
    const increment = difference / (duration / 16);
    let current = currentValue;
    
    element.classList.add('animate');
    
    const timer = setInterval(() => {
        current += increment;
        if ((increment > 0 && current >= newValue) || (increment < 0 && current <= newValue)) {
            current = newValue;
            clearInterval(timer);
            element.classList.remove('animate');
        }
        element.textContent = Math.floor(current);
    }, 16);
}

// Load manager statistics
function loadManagerStats() {
    showLoading();
    
    fetch('{{config.wwwroot}}/theme/remui_kids/admin/detail_department_managers.php?action=get_manager_stats')
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                animateNumberUpdate('department-managers', data.stats.department_managers);
                animateNumberUpdate('company-managers', data.stats.company_managers);
                animateNumberUpdate('total-employees', data.stats.total_employees);
                animateNumberUpdate('active-managers', data.stats.active_managers);
            }
        })
        .catch(error => {
            console.error('Error loading stats:', error);
        })
        .finally(() => {
            hideLoading();
        });
}

// Load managers with enhanced animations
function loadManagers() {
    showLoading();
    
    const params = new URLSearchParams({
        action: 'get_managers',
        page: currentPage,
        per_page: currentPerPage,
        search: currentSearch,
        sort: currentSort,
        order: currentOrder
    });
    
    fetch(`{{config.wwwroot}}/theme/remui_kids/admin/detail_department_managers.php?${params}`)
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                displayManagers(data.managers);
                totalPages = data.total_pages;
                updatePagination();
            } else {
                console.error('Error:', data.message);
            }
        })
        .catch(error => {
            console.error('Error loading managers:', error);
        })
        .finally(() => {
            hideLoading();
        });
}

// Display managers with animations
function displayManagers(managers) {
    const tbody = document.getElementById('managersTableBody');
    
    if (managers.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="9" class="loading-cell">
                    <div style="text-align: center; padding: 40px; color: #6c757d;">
                        <i class="fa fa-info-circle" style="font-size: 2rem; margin-bottom: 15px;"></i>
                        <div>No department managers found</div>
                    </div>
                </td>
            </tr>
        `;
        return;
    }
    
    tbody.innerHTML = managers.map((manager, index) => `
        <tr style="animation-delay: ${index * 0.1}s">
            <td>
                <div class="manager-name">${manager.firstname} ${manager.lastname}</div>
            </td>
            <td>
                <div class="manager-username">${manager.username}</div>
            </td>
            <td>
                <div class="manager-email">${manager.email}</div>
            </td>
            <td>
                <div class="manager-department">${manager.department_name || 'N/A'}</div>
            </td>
            <td>
                <div class="manager-department">${manager.company_name || 'N/A'}</div>
            </td>
            <td>
                <div class="manager-role">${getManagerTypeText(manager.managertype)}</div>
            </td>
            <td>
                <div class="manager-employees">${manager.employees_count || 0}</div>
            </td>
            <td>
                <div class="manager-date">${formatDate(manager.lastaccess)}</div>
            </td>
            <td>
                <div class="action-buttons">
                    <button class="btn-action btn-edit" onclick="editManager(${manager.id})">
                        <i class="fa fa-edit"></i> Edit
                    </button>
                    <button class="btn-action btn-view" onclick="viewManager(${manager.id})">
                        <i class="fa fa-eye"></i> View
                    </button>
                </div>
            </td>
        </tr>
    `).join('');
}

function getManagerTypeText(type) {
    switch(type) {
        case 1: return 'School Admin';
        case 2: return 'School Admin';
        default: return 'School Admin';
    }
}

function formatDate(timestamp) {
    if (!timestamp) return 'Never';
    const date = new Date(timestamp * 1000);
    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
}

function updatePagination() {
    // Pagination implementation would go here
}

// Event listeners with enhanced interactions
document.addEventListener('DOMContentLoaded', function() {
    // Load initial data
    loadManagerStats();
    loadManagers();
    
    // Search functionality
    const searchInput = document.getElementById('searchInput');
    const searchBtn = document.getElementById('searchBtn');
    
    let searchTimeout;
    searchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
            currentSearch = this.value;
            currentPage = 1;
            loadManagers();
        }, 500);
    });
    
    searchBtn.addEventListener('click', function() {
        currentSearch = searchInput.value;
        currentPage = 1;
        loadManagers();
    });
    
    // Filter controls
    document.getElementById('sortSelect').addEventListener('change', function() {
        currentSort = this.value;
        loadManagers();
    });
    
    document.getElementById('orderSelect').addEventListener('change', function() {
        currentOrder = this.value;
        loadManagers();
    });
    
    document.getElementById('perPageSelect').addEventListener('change', function() {
        currentPerPage = parseInt(this.value);
        currentPage = 1;
        loadManagers();
    });
    
    // Refresh button
    document.getElementById('refreshBtn').addEventListener('click', function() {
        this.innerHTML = '<i class="fa fa-spinner fa-spin"></i> Refreshing...';
        loadManagerStats();
        loadManagers();
        setTimeout(() => {
            this.innerHTML = '<i class="fa fa-refresh"></i> Refresh';
        }, 1000);
    });
    
    // Add hover effects to cards
    const statCards = document.querySelectorAll('.stat-card');
    statCards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-10px) scale(1.02)';
        });
        
        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
        });
    });
});

// Manager actions
function editManager(id) {
    // Show loading overlay
    showLoading();
    
    // Fetch real manager data first
    fetch(`{{config.wwwroot}}/theme/remui_kids/admin/detail_department_managers.php?action=get_manager_details&id=${id}`)
        .then(response => response.json())
        .then(data => {
            hideLoading();
            
            if (data.status === 'success' && data.manager) {
                const manager = data.manager;
                
                const modal = document.createElement('div');
                modal.className = 'edit-modal';
                modal.innerHTML = `
                    <div class="modal-overlay" onclick="closeModal()">
                        <div class="modal-content" onclick="event.stopPropagation()">
                            <div class="modal-header">
                                <h3>Edit Manager</h3>
                                <button class="close-btn" onclick="closeModal()">&times;</button>
                            </div>
                            <div class="modal-body">
                                <div class="form-group">
                                    <label>First Name:</label>
                                    <input type="text" id="managerFirstName" value="${manager.firstname || ''}" placeholder="Enter first name">
                                </div>
                                <div class="form-group">
                                    <label>Last Name:</label>
                                    <input type="text" id="managerLastName" value="${manager.lastname || ''}" placeholder="Enter last name">
                                </div>
                                <div class="form-group">
                                    <label>Email:</label>
                                    <input type="email" id="managerEmail" value="${manager.email || ''}" placeholder="Enter email">
                                </div>
                                <div class="form-group">
                                    <label>Department:</label>
                                    <select id="managerDept">
                                        <option value="">Select Department</option>
                                        <option value="${manager.departmentid || ''}" selected>${manager.department_name || 'Current Department'}</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Manager Type:</label>
                                    <select id="managerType">
                                       
                                        <option value="1" ${manager.managertype == 1 ? 'selected' : ''}>Department Managers</option>
                                       
                                    </select>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button class="btn-cancel" onclick="closeModal()">Cancel</button>
                                <button class="btn-save" onclick="saveManager(${id})">Save Changes</button>
                            </div>
                        </div>
                    </div>
                `;
        
        // Add basic modal styles
        const style = document.createElement('style');
        style.textContent = `
            .edit-modal { position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: 10000; }
            .modal-overlay { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; }
            .modal-content { background: white; border-radius: 15px; padding: 0; max-width: 500px; width: 90%; box-shadow: 0 20px 40px rgba(0,0,0,0.3); }
            .modal-header { padding: 20px 25px; border-bottom: 1px solid #e9ecef; display: flex; justify-content: space-between; align-items: center; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 15px 15px 0 0; }
            .modal-header h3 { margin: 0; font-size: 1.3rem; }
            .close-btn { background: none; border: none; color: white; font-size: 1.5rem; cursor: pointer; padding: 5px; border-radius: 50%; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; }
            .close-btn:hover { background: rgba(255,255,255,0.2); }
            .modal-body { padding: 25px; }
            .form-group { margin-bottom: 20px; }
            .form-group label { display: block; margin-bottom: 8px; font-weight: 600; color: #2c3e50; }
            .form-group input, .form-group select { width: 100%; padding: 12px 15px; border: 2px solid #e9ecef; border-radius: 8px; font-size: 1rem; }
            .form-group input:focus, .form-group select:focus { outline: none; border-color: #667eea; box-shadow: 0 0 0 3px rgba(102,126,234,0.1); }
            .modal-footer { padding: 20px 25px; border-top: 1px solid #e9ecef; display: flex; gap: 15px; justify-content: flex-end; }
            .btn-cancel, .btn-save { padding: 12px 25px; border: none; border-radius: 8px; cursor: pointer; font-weight: 600; }
            .btn-cancel { background: #6c757d; color: white; }
            .btn-cancel:hover { background: #5a6268; }
            .btn-save { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }
            .btn-save:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(102,126,234,0.4); }
        `;
                document.head.appendChild(style);
                document.body.appendChild(modal);
            } else {
                alert('Error loading manager details: ' + (data.message || 'Unknown error'));
            }
        })
        .catch(error => {
            hideLoading();
            console.error('Error:', error);
            alert('Error loading manager details');
        });
}

function viewManager(id) {
    // Show loading overlay
    showLoading();
    
    // Fetch real manager details from backend
    fetch(`{{config.wwwroot}}/theme/remui_kids/admin/detail_department_managers.php?action=get_manager_details&id=${id}`)
        .then(response => response.json())
        .then(data => {
            hideLoading();
            
            if (data.status === 'success' && data.manager) {
                const manager = data.manager;
                
                const modal = document.createElement('div');
                modal.className = 'view-modal';
                modal.innerHTML = `
                    <div class="modal-overlay" onclick="closeModal()">
                        <div class="modal-content" onclick="event.stopPropagation()">
                            <div class="modal-header">
                                <h3>Manager Details</h3>
                                <button class="close-btn" onclick="closeModal()">&times;</button>
                            </div>
                            <div class="modal-body">
                                <div class="manager-profile">
                                    <div class="profile-avatar">
                                        <i class="fa fa-user-circle"></i>
                                    </div>
                                    <div class="profile-info">
                                        <h4>${manager.firstname} ${manager.lastname}</h4>
                                        <p class="manager-role">${getManagerTypeText(manager.managertype)}</p>
                                    </div>
                                </div>
                                
                                <div class="details-grid">
                                    <div class="detail-item">
                                        <label>Manager ID:</label>
                                        <span>${manager.id}</span>
                                    </div>
                                    <div class="detail-item">
                                        <label>Username:</label>
                                        <span>${manager.username}</span>
                                    </div>
                                    <div class="detail-item">
                                        <label>Email:</label>
                                        <span>${manager.email}</span>
                                    </div>
                                    <div class="detail-item">
                                        <label>Department:</label>
                                        <span>${manager.department_name || 'N/A'}</span>
                                    </div>
                                    <div class="detail-item">
                                        <label>Company:</label>
                                        <span>${manager.company_name || 'N/A'}</span>
                                    </div>
                                    <div class="detail-item">
                                        <label>Employees Managed:</label>
                                        <span>${manager.employees_count || 0}</span>
                                    </div>
                                    <div class="detail-item">
                                        <label>Last Access:</label>
                                        <span>${formatDate(manager.lastaccess)}</span>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button class="btn-close" onclick="closeModal()">Close</button>
                                <button class="btn-edit-manager" onclick="editManager(${manager.id}); closeModal();">Edit Manager</button>
                            </div>
                        </div>
                    </div>
                        `;
                
                // Add modal styles
                const style = document.createElement('style');
                style.textContent = `
                    .view-modal { position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: 10000; }
                    .modal-overlay { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; }
                    .modal-content { background: white; border-radius: 15px; padding: 0; max-width: 600px; width: 90%; box-shadow: 0 20px 40px rgba(0,0,0,0.3); }
                    .modal-header { padding: 20px 25px; border-bottom: 1px solid #e9ecef; display: flex; justify-content: space-between; align-items: center; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 15px 15px 0 0; }
                    .modal-header h3 { margin: 0; font-size: 1.3rem; }
                    .close-btn { background: none; border: none; color: white; font-size: 1.5rem; cursor: pointer; padding: 5px; border-radius: 50%; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; }
                    .close-btn:hover { background: rgba(255,255,255,0.2); }
                    .modal-body { padding: 25px; }
                    .manager-profile { display: flex; align-items: center; gap: 20px; margin-bottom: 30px; padding: 20px; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border-radius: 12px; }
                    .profile-avatar i { font-size: 4rem; color: #667eea; }
                    .profile-info h4 { margin: 0 0 5px 0; color: #2c3e50; font-size: 1.5rem; }
                    .manager-role { margin: 0; color: #6c757d; font-weight: 500; }
                    .details-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; }
                    .detail-item { padding: 15px; background: #f8f9fa; border-radius: 8px; border-left: 4px solid #667eea; }
                    .detail-item label { display: block; font-weight: 600; color: #2c3e50; margin-bottom: 5px; font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px; }
                    .detail-item span { color: #495057; font-size: 1.1rem; }
                    .modal-footer { padding: 20px 25px; border-top: 1px solid #e9ecef; display: flex; gap: 15px; justify-content: flex-end; }
                    .btn-close, .btn-edit-manager { padding: 12px 25px; border: none; border-radius: 8px; cursor: pointer; font-weight: 600; }
                    .btn-close { background: #6c757d; color: white; }
                    .btn-close:hover { background: #5a6268; }
                    .btn-edit-manager { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }
                    .btn-edit-manager:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(102,126,234,0.4); }
                `;
                document.head.appendChild(style);
                document.body.appendChild(modal);
            } else {
                alert('Error loading manager details: ' + (data.message || 'Unknown error'));
            }
        })
        .catch(error => {
            hideLoading();
            console.error('Error:', error);
            alert('Error loading manager details');
        });
}

// Helper functions for modal operations
function saveManager(id) {
    const firstName = document.getElementById('managerFirstName').value;
    const lastName = document.getElementById('managerLastName').value;
    const email = document.getElementById('managerEmail').value;
    const dept = document.getElementById('managerDept').value;
    const managerType = document.getElementById('managerType').value;
    
    if (!firstName.trim() || !lastName.trim()) {
        alert('Please enter both first and last name');
        return;
    }
    
    if (!email.trim()) {
        alert('Please enter an email address');
        return;
    }
    
    // Show loading
    showLoading();
    
    // Prepare data for saving
    const formData = new FormData();
    formData.append('action', 'update_manager');
    formData.append('id', id);
    formData.append('firstname', firstName);
    formData.append('lastname', lastName);
    formData.append('email', email);
    formData.append('departmentid', dept);
    formData.append('managertype', managerType);
    
    // Save to backend
    fetch(`{{config.wwwroot}}/theme/remui_kids/admin/detail_department_managers.php`, {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        hideLoading();
        
        if (data.status === 'success') {
            closeModal();
            alert(`Manager ${id} updated successfully!`);
            loadManagers(); // Refresh the table
        } else {
            alert('Error updating manager: ' + (data.message || 'Unknown error'));
        }
    })
    .catch(error => {
        hideLoading();
        console.error('Error:', error);
        alert('Error updating manager');
    });
}

function closeModal() {
    const modals = document.querySelectorAll('.edit-modal, .view-modal');
    modals.forEach(modal => modal.remove());
    
    // Remove any added styles
    const addedStyles = document.querySelectorAll('style');
    addedStyles.forEach(style => {
        if (style.textContent.includes('.edit-modal') || style.textContent.includes('.view-modal')) {
            style.remove();
        }
    });
}
</script>
