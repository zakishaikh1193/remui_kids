{{> theme_remui_kids/admin_shared_styles }}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Assign Users to School</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg,rgb(124, 134, 175) 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .assign-school-container {
            max-width: 1600px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            animation: fadeIn 0.8s ease-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(30px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .header {
            background: linear-gradient(135deg,rgb(175, 186, 231),rgb(145, 125, 167));
            color: white;
            padding: 30px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
           
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(180deg); }
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            position: relative;
            z-index: 1;
            animation: titleGlow 2s ease-in-out infinite alternate;
        }

        @keyframes titleGlow {
            from { text-shadow: 0 0 20px rgba(255,255,255,0.5); }
            to { text-shadow: 0 0 30px rgba(255,255,255,0.8), 0 0 40px rgba(255,255,255,0.3); }
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
            position: relative;
            z-index: 1;
        }

        .content {
            padding: 40px;
        }

        .school-selection-section {
            background: linear-gradient(135deg, #f8f9ff, #e8f0ff);
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 30px;
            border: 2px solid #e3f2fd;
            animation: slideInDown 0.8s ease-out 0.2s both;
        }

        .school-selector {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .selected-school-info {
            background: white;
            border-radius: 10px;
            padding: 20px;
            border: 2px solid #e0e0e0;
            margin-top: 15px;
        }

        .school-details h3 {
            color: #333;
            margin-bottom: 5px;
            font-size: 1.2rem;
        }

        .school-details p {
            color: #666;
            margin: 0;
        }

        @keyframes slideInDown {
            from { opacity: 0; transform: translateY(-30px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .search-section h2 {
            color: #333;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .search-input {
            width: 100%;
            padding: 15px 20px;
            border: 2px solid #e0e0e0;
            border-radius: 10px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: white;
        }

        .search-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .panels-container {
            display: grid;
            grid-template-columns: 1fr auto 1fr;
            gap: 20px;
            margin-bottom: 30px;
            align-items: start;
        }

        .panel {
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border: 2px solid #f0f0f0;
            animation: slideInLeft 0.8s ease-out 0.4s both;
            height: 500px;
            display: flex;
            flex-direction: column;
        }

        .available-users-panel {
            animation: slideInRight 0.8s ease-out 0.4s both;
        }

        @keyframes slideInLeft {
            from { opacity: 0; transform: translateX(-30px); }
            to { opacity: 1; transform: translateX(0); }
        }

        @keyframes slideInRight {
            from { opacity: 0; transform: translateX(30px); }
            to { opacity: 1; transform: translateX(0); }
        }

        .panel-header {
            padding: 20px 25px 15px;
            border-bottom: 2px solid #f0f0f0;
            flex-shrink: 0;
        }

        .panel-header h3 {
            color: #333;
            font-size: 1.3rem;
            margin: 0;
        }

        .panel-content {
            flex: 1;
            padding: 20px 25px;
            overflow-y: auto;
        }

        .panel-footer {
            padding: 15px 25px 20px;
            border-top: 2px solid #f0f0f0;
            flex-shrink: 0;
        }

        .search-controls {
            display: flex;
            align-items: center;
            gap: 10px;
            flex-wrap: wrap;
        }

        .search-controls label {
            font-weight: 600;
            color: #333;
            white-space: nowrap;
        }

        .form-select {
            padding: 8px 12px;
            border: 2px solid #e0e0e0;
            border-radius: 6px;
            font-size: 0.9rem;
            background: white;
            min-width: 120px;
        }

        .action-buttons {
            display: flex;
            flex-direction: column;
            gap: 15px;
            align-items: center;
            justify-content: center;
            padding: 20px 0;
        }

        .action-btn {
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
            min-width: 100px;
            justify-content: center;
        }

        .add-btn {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
        }

        .add-btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(40, 167, 69, 0.3);
        }

        .remove-btn {
            background: linear-gradient(135deg, #dc3545, #c82333);
            color: white;
        }

        .remove-btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(220, 53, 69, 0.3);
        }

        .action-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .user-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            margin-bottom: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            background: white;
        }

        .user-item:hover {
            border-color: #667eea;
            background: #f8f9ff;
        }

        .user-item.selected {
            border-color: #667eea;
            background: linear-gradient(135deg, #f8f9ff, #e8f0ff);
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.2);
        }

        .user-avatar {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 0.9rem;
            background: linear-gradient(135deg, #667eea, #764ba2);
        }

        .user-info {
            flex: 1;
        }

        .user-name {
            font-weight: 600;
            color: #333;
            margin-bottom: 3px;
            font-size: 0.95rem;
        }

        .user-email {
            color: #666;
            font-size: 0.85rem;
        }

        .checkbox {
            width: 18px;
            height: 18px;
            border: 2px solid #ddd;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s ease;
            flex-shrink: 0;
        }

        .checkbox.checked {
            background: #667eea;
            border-color: #667eea;
            position: relative;
        }

        .checkbox.checked::after {
            content: 'âœ“';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 11px;
            font-weight: bold;
        }

        .assignment-section {
            background: linear-gradient(135deg,rgb(201, 237, 241),rgb(203, 234, 247));
            border-radius: 15px;
            padding: 30px;
            text-align: center;
            border: 2px solidrgb(180, 223, 240);
            animation: slideInUp 0.8s ease-out 0.6s both;
        }

        @keyframes slideInUp {
            from { opacity: 0; transform: translateY(30px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .assignment-section h3 {
            color: #333;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        .selected-count {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            display: inline-block;
            margin: 10px 0;
            font-weight: 600;
        }

        .assign-btn {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 10px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 10px;
        }

        .assign-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(40, 167, 69, 0.3);
        }

        .assign-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .back-btn {
            background: linear-gradient(135deg, #6c757d, #495057);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 8px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .back-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(108, 117, 125, 0.3);
        }

        .loading {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .loading.show {
            display: block;
        }

        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .message {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 10px;
            color: white;
            font-weight: 600;
            z-index: 1000;
            animation: slideInRight 0.3s ease-out;
        }

        .message.success {
            background: linear-gradient(135deg, #28a745, #20c997);
        }

        .message.error {
            background: linear-gradient(135deg, #dc3545, #c82333);
        }

        @keyframes slideInRight {
            from { transform: translateX(100%); }
            to { transform: translateX(0); }
        }

        @media (max-width: 768px) {
            .results-section {
                grid-template-columns: 1fr;
            }
            
            .content {
                padding: 20px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="assign-school-container">
        <div class="header">
            <h1><i class="fas fa-school"></i> Assign Users to School</h1>
            <p>Select users and assign them to schools for better organization</p>
        </div>

        <div class="content">
            <div class="school-selection-section">
                <h2><i class="fas fa-school"></i> Select School</h2>
                <div class="school-selector">
                    <label for="schoolSelect" class="form-label">Choose a school:</label>
                    <select id="schoolSelect" class="form-select">
                        <option value="">Select a school...</option>
                    </select>
                    <div id="selectedSchoolInfo" class="selected-school-info" style="display: none;">
                        <div class="school-details">
                            <h3 id="selectedSchoolName"></h3>
                            <p id="selectedSchoolCode"></p>
                            <p id="selectedSchoolAddress"></p>
                            <p id="selectedSchoolLocation"></p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="assignment-section" id="assignmentSection" style="display: none;">
                <h2><i class="fas fa-exchange-alt"></i> Add/Remove Users</h2>
                
                <div class="panels-container">
                    <div class="panel school-users-panel">
                        <div class="panel-header">
                            <h3>School Users (<span id="schoolUsersCount">0</span>)</h3>
                        </div>
                        <div class="panel-content" id="schoolUsersList">
                            <div class="loading">
                                <div class="spinner"></div>
                                <p>Loading school users...</p>
                            </div>
                        </div>
                        <div class="panel-footer">
                            <div class="search-controls">
                                <label>User:</label>
                                <select id="schoolUserFilter" class="form-select">
                                    <option value="">All users</option>
                                    <option value="student">Students</option>
                                    <option value="teacher">Teachers</option>
                                    <option value="manager">Managers</option>
                                </select>
                                <input type="text" id="schoolUserSearch" class="search-input" placeholder="Search...">
                                <button type="button" id="clearSchoolSearch" class="btn btn-secondary">Clear</button>
                            </div>
                        </div>
                    </div>

                    <div class="action-buttons">
                        <button id="addUsersBtn" class="action-btn add-btn" disabled>
                            <i class="fas fa-arrow-left"></i>
                            Add
                        </button>
                        <button id="removeUsersBtn" class="action-btn remove-btn" disabled>
                            <i class="fas fa-arrow-right"></i>
                            Remove
                        </button>
                    </div>

                    <div class="panel available-users-panel">
                        <div class="panel-header">
                            <h3>Available Users (<span id="availableUsersCount">0</span>)</h3>
                        </div>
                        <div class="panel-content" id="availableUsersList">
                            <div class="loading">
                                <div class="spinner"></div>
                                <p>Loading available users...</p>
                            </div>
                        </div>
                        <div class="panel-footer">
                            <div class="search-controls">
                                <label>User:</label>
                                <select id="availableUserFilter" class="form-select">
                                    <option value="">All users</option>
                                    <option value="student">Students</option>
                                    <option value="teacher">Teachers</option>
                                    <option value="manager">Managers</option>
                                </select>
                                <input type="text" id="availableUserSearch" class="search-input" placeholder="Search...">
                                <button type="button" id="clearAvailableSearch" class="btn btn-secondary">Clear</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="assignment-section">
                <h3><i class="fas fa-link"></i> Assignment Summary</h3>
                <div class="selected-count" id="selectedCount">0 users selected</div>
                <div id="selectedSchool" style="margin: 10px 0; font-weight: 600; color: #333;"></div>
                <button id="assignBtn" class="assign-btn" disabled>
                    <i class="fas fa-check"></i> Assign Selected Users
                </button>
                <a href="{{config.wwwroot}}/theme/remui_kids/admin/users_management_dashboard.php" class="back-btn">
                    <i class="fas fa-arrow-left"></i> Back to Dashboard
                </a>
            </div>
        </div>
    </div>

    <script>
        let schoolUsers = [];
        let availableUsers = [];
        let selectedSchoolUsers = new Set();
        let selectedAvailableUsers = new Set();

        document.addEventListener('DOMContentLoaded', function() {
            // Test the endpoint first
            testEndpoint();
            loadSchools();
            initializeEventListeners();
        });

        function testEndpoint() {
            fetch(`{{config.wwwroot}}/theme/remui_kids/admin/assign_school.php?action=test`)
                .then(response => {
                    console.log('Test response status:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('Test response data:', data);
                })
                .catch(error => {
                    console.error('Test endpoint error:', error);
                    showMessage('Connection error: ' + error.message, 'error');
                });
        }

        function initializeEventListeners() {
            // School selection
            document.getElementById('schoolSelect').addEventListener('change', onSchoolChange);
            
            // Search controls
            document.getElementById('schoolUserSearch').addEventListener('input', debounce(loadSchoolUsers, 300));
            document.getElementById('availableUserSearch').addEventListener('input', debounce(loadAvailableUsers, 300));
            
            // Filter controls
            document.getElementById('schoolUserFilter').addEventListener('change', loadSchoolUsers);
            document.getElementById('availableUserFilter').addEventListener('change', loadAvailableUsers);
            
            // Clear buttons
            document.getElementById('clearSchoolSearch').addEventListener('click', () => {
                document.getElementById('schoolUserSearch').value = '';
                loadSchoolUsers();
            });
            document.getElementById('clearAvailableSearch').addEventListener('click', () => {
                document.getElementById('availableUserSearch').value = '';
                loadAvailableUsers();
            });
            
            // Action buttons
            document.getElementById('addUsersBtn').addEventListener('click', addUsersToSchool);
            document.getElementById('removeUsersBtn').addEventListener('click', removeUsersFromSchool);
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        function loadSchools() {
            console.log('Loading schools...');
            fetch(`{{config.wwwroot}}/theme/remui_kids/admin/assign_school.php?action=get_schools`)
                .then(response => {
                    console.log('Schools response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Schools response data:', data);
                    if (data.status === 'success') {
                        const schoolSelect = document.getElementById('schoolSelect');
                        schoolSelect.innerHTML = '<option value="">Select a school...</option>';
                        
                        data.schools.forEach(school => {
                            const option = document.createElement('option');
                            option.value = school.id;
                            option.textContent = school.name;
                            schoolSelect.appendChild(option);
                        });
                    } else {
                        showMessage('Error loading schools: ' + data.message, 'error');
                    }
                })
                .catch(error => {
                    console.error('Error loading schools:', error);
                    showMessage('Error loading schools: ' + error.message, 'error');
                });
        }

        function onSchoolChange() {
            const schoolId = document.getElementById('schoolSelect').value;
            const assignmentSection = document.getElementById('assignmentSection');
            const selectedSchoolInfo = document.getElementById('selectedSchoolInfo');
            
            if (schoolId) {
                // Show assignment section
                assignmentSection.style.display = 'block';
                
                // Load school details
                loadSchoolDetails(schoolId);
                
                // Load users for selected school
                loadSchoolUsers();
                loadAvailableUsers();
            } else {
                // Hide assignment section
                assignmentSection.style.display = 'none';
                selectedSchoolInfo.style.display = 'none';
            }
        }

        function loadSchoolDetails(schoolId) {
            fetch(`{{config.wwwroot}}/theme/remui_kids/admin/assign_school.php?action=get_school_details&school_id=${schoolId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        const school = data.school;
                        document.getElementById('selectedSchoolName').textContent = school.name;
                        document.getElementById('selectedSchoolCode').textContent = `Code: ${school.code}`;
                        
                        // Display address if available
                        if (school.address) {
                            document.getElementById('selectedSchoolAddress').textContent = `Address: ${school.address}`;
                        } else {
                            document.getElementById('selectedSchoolAddress').textContent = '';
                        }
                        
                        // Display location (city, region, postcode)
                        let location = '';
                        if (school.city) location += school.city;
                        if (school.region) location += (location ? ', ' : '') + school.region;
                        if (school.postcode) location += (location ? ' ' : '') + school.postcode;
                        if (school.country) location += (location ? ', ' : '') + school.country;
                        
                        if (location) {
                            document.getElementById('selectedSchoolLocation').textContent = `Location: ${location}`;
                        } else {
                            document.getElementById('selectedSchoolLocation').textContent = '';
                        }
                        
                        document.getElementById('selectedSchoolInfo').style.display = 'block';
                    }
                })
                .catch(error => {
                    console.error('Error loading school details:', error);
                });
        }

        function loadSchoolUsers() {
            const schoolId = document.getElementById('schoolSelect').value;
            if (!schoolId) return;
            
            const search = document.getElementById('schoolUserSearch').value;
            const filter = document.getElementById('schoolUserFilter').value;
            const usersList = document.getElementById('schoolUsersList');
            
            usersList.innerHTML = '<div class="loading show"><div class="spinner"></div><p>Loading school users...</p></div>';

            fetch(`{{config.wwwroot}}/theme/remui_kids/admin/assign_school.php?action=get_school_users&school_id=${schoolId}&search=${encodeURIComponent(search)}&filter=${encodeURIComponent(filter)}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        schoolUsers = data.users;
                        renderSchoolUsers(data.users);
                        updateSchoolUsersCount(data.users.length);
                    } else {
                        showMessage('Error loading school users: ' + data.message, 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showMessage('Error loading school users', 'error');
                });
        }

        function loadAvailableUsers() {
            const schoolId = document.getElementById('schoolSelect').value;
            if (!schoolId) return;
            
            const search = document.getElementById('availableUserSearch').value;
            const filter = document.getElementById('availableUserFilter').value;
            const usersList = document.getElementById('availableUsersList');
            
            usersList.innerHTML = '<div class="loading show"><div class="spinner"></div><p>Loading available users...</p></div>';

            fetch(`{{config.wwwroot}}/theme/remui_kids/admin/assign_school.php?action=get_available_users&school_id=${schoolId}&search=${encodeURIComponent(search)}&filter=${encodeURIComponent(filter)}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        availableUsers = data.users;
                        renderAvailableUsers(data.users);
                        updateAvailableUsersCount(data.users.length);
                    } else {
                        showMessage('Error loading available users: ' + data.message, 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showMessage('Error loading available users', 'error');
                });
        }

        function renderSchoolUsers(users) {
            const usersList = document.getElementById('schoolUsersList');
            
            if (users.length === 0) {
                usersList.innerHTML = '<p style="text-align: center; color: #666; padding: 20px;">No school users found</p>';
                return;
            }

            usersList.innerHTML = users.map(user => `
                <div class="user-item" data-user-id="${user.id}">
                    <div class="checkbox" onclick="toggleSchoolUserSelection(${user.id})"></div>
                    <div class="user-avatar">
                        ${user.firstname.charAt(0).toUpperCase()}${user.lastname.charAt(0).toUpperCase()}
                    </div>
                    <div class="user-info">
                        <div class="user-name">${user.firstname} ${user.lastname}</div>
                        <div class="user-email">${user.email}</div>
                    </div>
                </div>
            `).join('');
        }

        function renderAvailableUsers(users) {
            const usersList = document.getElementById('availableUsersList');
            
            if (users.length === 0) {
                usersList.innerHTML = '<p style="text-align: center; color: #666; padding: 20px;">No available users found</p>';
                return;
            }

            usersList.innerHTML = users.map(user => `
                <div class="user-item" data-user-id="${user.id}">
                    <div class="checkbox" onclick="toggleAvailableUserSelection(${user.id})"></div>
                    <div class="user-avatar">
                        ${user.firstname.charAt(0).toUpperCase()}${user.lastname.charAt(0).toUpperCase()}
                    </div>
                    <div class="user-info">
                        <div class="user-name">${user.firstname} ${user.lastname}</div>
                        <div class="user-email">${user.email}</div>
                    </div>
                </div>
            `).join('');
        }

        function toggleSchoolUserSelection(userId) {
            const userItem = document.querySelector(`[data-user-id="${userId}"]`);
            const checkbox = userItem.querySelector('.checkbox');
            
            if (selectedSchoolUsers.has(userId)) {
                selectedSchoolUsers.delete(userId);
                userItem.classList.remove('selected');
                checkbox.classList.remove('checked');
            } else {
                selectedSchoolUsers.add(userId);
                userItem.classList.add('selected');
                checkbox.classList.add('checked');
            }
            
            updateActionButtons();
        }

        function toggleAvailableUserSelection(userId) {
            const userItem = document.querySelector(`[data-user-id="${userId}"]`);
            const checkbox = userItem.querySelector('.checkbox');
            
            if (selectedAvailableUsers.has(userId)) {
                selectedAvailableUsers.delete(userId);
                userItem.classList.remove('selected');
                checkbox.classList.remove('checked');
            } else {
                selectedAvailableUsers.add(userId);
                userItem.classList.add('selected');
                checkbox.classList.add('checked');
            }
            
            updateActionButtons();
        }

        function updateActionButtons() {
            const addBtn = document.getElementById('addUsersBtn');
            const removeBtn = document.getElementById('removeUsersBtn');
            
            addBtn.disabled = selectedAvailableUsers.size === 0;
            removeBtn.disabled = selectedSchoolUsers.size === 0;
        }

        function updateSchoolUsersCount(count) {
            document.getElementById('schoolUsersCount').textContent = count;
        }

        function updateAvailableUsersCount(count) {
            document.getElementById('availableUsersCount').textContent = count;
        }

        function addUsersToSchool() {
            if (selectedAvailableUsers.size === 0) {
                showMessage('Please select users to add', 'error');
                return;
            }
            
            const addBtn = document.getElementById('addUsersBtn');
            const originalText = addBtn.innerHTML;
            addBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adding...';
            addBtn.disabled = true;
            
            const schoolId = document.getElementById('schoolSelect').value;
            const data = {
                user_ids: Array.from(selectedAvailableUsers),
                school_id: schoolId,
                action: 'add'
            };
            
            fetch(`{{config.wwwroot}}/theme/remui_kids/admin/assign_school.php?action=assign_users`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    showMessage(data.message, 'success');
                    
                    // Clear selections and reload
                    selectedAvailableUsers.clear();
                    loadSchoolUsers();
                    loadAvailableUsers();
                } else {
                    showMessage(data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showMessage('Error adding users', 'error');
            })
            .finally(() => {
                addBtn.innerHTML = originalText;
                addBtn.disabled = false;
            });
        }

        function removeUsersFromSchool() {
            if (selectedSchoolUsers.size === 0) {
                showMessage('Please select users to remove', 'error');
                return;
            }
            
            const removeBtn = document.getElementById('removeUsersBtn');
            const originalText = removeBtn.innerHTML;
            removeBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Removing...';
            removeBtn.disabled = true;
            
            const schoolId = document.getElementById('schoolSelect').value;
            const data = {
                user_ids: Array.from(selectedSchoolUsers),
                school_id: schoolId,
                action: 'remove'
            };
            
            fetch(`{{config.wwwroot}}/theme/remui_kids/admin/assign_school.php?action=assign_users`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    showMessage(data.message, 'success');
                    
                    // Clear selections and reload
                    selectedSchoolUsers.clear();
                    loadSchoolUsers();
                    loadAvailableUsers();
                } else {
                    showMessage(data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showMessage('Error removing users', 'error');
            })
            .finally(() => {
                removeBtn.innerHTML = originalText;
                removeBtn.disabled = false;
            });
        }

        function showMessage(text, type) {
            const message = document.createElement('div');
            message.className = `message ${type}`;
            message.textContent = text;
            document.body.appendChild(message);
            
            setTimeout(() => {
                message.style.animation = 'slideInRight 0.3s ease-out reverse';
                setTimeout(() => message.remove(), 300);
            }, 5000);
        }
    </script>
</body>
</html>
